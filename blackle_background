#!/usr/bin/python2.7
from gi.repository import Gtk, GObject
from gi.repository.GdkPixbuf import Pixbuf, InterpType
import subprocess, os, time, errno



def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as exc:
        if exc.errno == errno.EEXIST:
            pass
        else: raise

class MyWindow(Gtk.Window):

    def __init__(self):
        """Initialize EVERYTHING"""
        
        Gtk.Window.__init__(self, title="Blackle's Backgrounder", resizable=True, default_height=500, default_width=510)
        
        home = os.path.expanduser("~")
        self.cache_directory = home+"/.cache/blackle_wall"
        
        mkdir_p(self.cache_directory)
        try:
            self.wallpaper_directory = open(self.cache_directory+"/.config", 'r').readline()
        except:
			self.change_folder("BOOTUP")
        
        #self.wallpaper_directory = home+"/Wallpapers"
        #mkdir_p(self.wallpaper_directory)
        
        self.close_button = Gtk.Button(label="Close", stock=Gtk.STOCK_CLOSE)
        self.close_button.connect("clicked", Gtk.main_quit)

        self.file_button = Gtk.Button(label="Change Folder", stock=Gtk.STOCK_OPEN)
        self.file_button.connect("clicked", self.change_folder)
        
        self.browser_info = Gtk.ListStore(Pixbuf, str)
        self.image_browser = Gtk.IconView.new()
        self.image_browser.set_model(self.browser_info)
        self.image_browser.set_pixbuf_column(0)
        self.image_browser.set_selection_mode(Gtk.SelectionMode.BROWSE)
        #self.image_browser.set_columns(2)
        self.image_browser.set_item_width(190)
        
        self.image_browser.connect("selection-changed", self.update_wallpaper)

        self.browser_scroll = Gtk.ScrolledWindow()
        self.browser_scroll.add(self.image_browser)
        #self.browser_scroll.set_size_request(502, 450)
        
        self.style_combo = Gtk.ComboBoxText()
        self.style_combo.connect("changed", self.update_wallpaper)
        self.style_combo.set_entry_text_column(0)
        styles = ["Center", "Fill", "Maximum", "Scale", "Tile"]
        for style in styles:
            self.style_combo.append_text(style)
        self.style_combo.set_active(1)
        
        self.blankbox = Gtk.Box()
        
        self.main_table = Gtk.Table(4, 2, False)
        self.main_table.attach(self.style_combo, 0, 1, 1, 2, Gtk.AttachOptions.SHRINK, Gtk.AttachOptions.SHRINK, 4, 4)
        self.main_table.attach(self.close_button, 3, 4, 1, 2, Gtk.AttachOptions.SHRINK, Gtk.AttachOptions.SHRINK, 4, 4)
        self.main_table.attach(self.file_button, 2, 3, 1, 2, Gtk.AttachOptions.SHRINK, Gtk.AttachOptions.SHRINK, 4, 4)                
        self.main_table.attach(self.browser_scroll, 0, 4, 0, 1, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, 4, 4)
        self.main_table.attach(self.blankbox, 1, 2, 1, 2, Gtk.AttachOptions.EXPAND | Gtk.AttachOptions.FILL, Gtk.AttachOptions.SHRINK, 4, 4)
        
        self.add(self.main_table)
        self.parse_directory()

    def parse_directory(self):
        os.chdir(self.wallpaper_directory)
        self.filelist = os.listdir(".")
        self.filelist.sort(key=lambda x: -os.path.getmtime(x))
        self.thumbdict = dict()
        self.iterator = 0
        
        GObject.idle_add(self.loadmore, None)

    def update_wallpaper(self, widget):
        """Update wallpaper using feh command (creates .fehbg which is useful)"""
        
        style = self.style_combo.get_active_text()
        command = "--bg-fill"
        if(style == "Center"):
            command = " --bg-center"
        elif(style == "Fill"):
            command = " --bg-fill"
        elif(style == "Maximum"):
            command = " --bg-max"
        elif(style == "Scale"):
            command = " --bg-scale"
        elif(style == "Tile"):
            command = " --bg-tile"
            
        try:
            background = self.image_browser.get_selected_items()[0]
        except:
            return None
        path = "'"+self.browser_info[background][1]+"'"
        subprocess.call("feh "+command+" "+path, shell=True)
        
        
    def loadmore(self, derp):
        """Reduce startup time by using an idle signal to load wallpaper icons"""

        files = self.filelist[self.iterator]
        if files.endswith(".png") or files.endswith(".jpg") or files.endswith(".jpeg") or files.endswith(".PNG") or files.endswith(".JPG") or files.endswith(".JPEG"):
                wallpaper = self.wallpaper_directory+"/"+files
                thumb_path = files
                self.thumbdict[thumb_path+".png"] = 0
                thumb_path = self.cache_directory+"/"+thumb_path+".png"
                if not (os.path.exists(thumb_path) and os.path.getmtime(thumb_path) > os.path.getmtime(wallpaper)):
                    tempthumb = Pixbuf.new_from_file(wallpaper)
                    #tempheight = 220*float(tempthumb.get_height())/float(tempthumb.get_width())
                    tempheight = 124
                    tempthumb = tempthumb.scale_simple(220, tempheight, InterpType.TILES)
                    self.browser_info.append([tempthumb, wallpaper])
                    tempthumb.savev(thumb_path, "png", [], [])
                else:
                    self.browser_info.append([Pixbuf.new_from_file(thumb_path), wallpaper])
        self.iterator += 1
        if self.iterator >= len(self.filelist):
            GObject.idle_add(self.clean_thumbnails, None)
        else:
            GObject.idle_add(self.loadmore, None)
            
    def change_folder(self, derp):
        chooser = Gtk.FileChooserDialog(title="Change Wallpaper Search Folder",action=Gtk.FileChooserAction.SELECT_FOLDER,buttons=(Gtk.STOCK_CANCEL,Gtk.ResponseType.CANCEL,Gtk.STOCK_OPEN,Gtk.ResponseType.OK))
        response = chooser.run()
        if response == Gtk.ResponseType.OK:
            self.wallpaper_directory = chooser.get_filename()
            open(self.cache_directory+"/.config", "w").write(self.wallpaper_directory)
            if derp != "BOOTUP":
				self.browser_info.clear()
				self.parse_directory()
            chooser.destroy()
        else:
            chooser.destroy()
            if derp == "BOOTUP":
				self.change_folder("BOOTUP")
            
    def clean_thumbnails(self, derp):
        """Go through thumbnails and delete unused ones"""
        
        os.chdir(self.cache_directory)
        thumblist = os.listdir(".")
        for thumb in thumblist:
            if not thumb in self.thumbdict and thumb != ".config":
                os.remove(self.cache_directory+"/"+thumb)
        
        

win = MyWindow()
win.connect("delete-event", Gtk.main_quit)
win.show_all()
Gtk.main()
